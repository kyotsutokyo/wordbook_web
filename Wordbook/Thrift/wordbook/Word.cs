/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Wordbook
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Word : TBase
  {
    private string _item;
    private string _trans;
    private string _tags;
    private TDateTime _time;

    public string Item
    {
      get
      {
        return _item;
      }
      set
      {
        __isset.item = true;
        this._item = value;
      }
    }

    public string Trans
    {
      get
      {
        return _trans;
      }
      set
      {
        __isset.trans = true;
        this._trans = value;
      }
    }

    public string Tags
    {
      get
      {
        return _tags;
      }
      set
      {
        __isset.tags = true;
        this._tags = value;
      }
    }

    public TDateTime Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool item;
      public bool trans;
      public bool tags;
      public bool time;
    }

    public Word() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Item = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Trans = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Tags = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Time = new TDateTime();
              Time.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Word");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Item != null && __isset.item) {
        field.Name = "item";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Item);
        oprot.WriteFieldEnd();
      }
      if (Trans != null && __isset.trans) {
        field.Name = "trans";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Trans);
        oprot.WriteFieldEnd();
      }
      if (Tags != null && __isset.tags) {
        field.Name = "tags";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Tags);
        oprot.WriteFieldEnd();
      }
      if (Time != null && __isset.time) {
        field.Name = "time";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Time.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Word(");
      sb.Append("Item: ");
      sb.Append(Item);
      sb.Append(",Trans: ");
      sb.Append(Trans);
      sb.Append(",Tags: ");
      sb.Append(Tags);
      sb.Append(",Time: ");
      sb.Append(Time== null ? "<null>" : Time.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
